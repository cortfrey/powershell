###################################################
#script clusterDiskScan.ps1
#author: Cort Frey
#date: 11/7/17
#version: 1.0
#purpose:  Run locally on a cluster to scan the 
#          cluster for the vm usage of cluster 
#		   disk space
#
#usage:     run from command line and respond to 
#           prompts
###################################################

$cluster = ""
$clusterSharedVolumes = ""
$csvList = @{}
$output =@()
$totalCurrentVHD = 0
$totalMaxVHD = 0

#get target cluster
$cluster = read-host "Please enter the clustername"

#get contents of the clusterstorage folder, currently only working locally
$clusterSharedVolumes = Get-ChildItem -path C:\clusterstorage

#create a set of keys to match the volumes of the csv with an array as the value
foreach($volume in $clusterSharedVolumes){
    $csvList[$volume.name] = @()
}

#create list of all VMs on the cluster, path, computername, vmname, and vmid are required
#computername is the name of the host server
$clusterServers = get-clustergroup -cluster $cluster | Where-Object{$_.grouptype -eq 'virtualmachine'} | get-vm | select-object -property path, computername, vmname, vmid

#determine which volume each server is stored in based on the path, add the array to value of the proper key (based on volume)
foreach($server in $clusterServers){
    $vol = ($server.path).split("\")[2]
    $csvList.$vol += $server
}

#the outer foreach loop will cycle through each volume so they can be analyzed
#specifically, it is looping through each key in the hash, the value being an array of all the systems on that volume
foreach($volume in $csvList.GetEnumerator()){
    $csv = $volume.key
    $vmlist = $volume.value

    #the inner foreach loop cycles through each system on a volume retrieving and analyzing data, and constructing the output
    foreach($vm in $vmlist){
        $vm.computername
        $vm.vmname
        $obj = New-Object psobject
        
        #filesize is the current size on disk, size is the maximum size possible
        $vhdInfo = get-vhd -vmid $vm.vmid -ComputerName $vm.computername | Select-Object -property filesize, size
        $vmMemInfo = get-vm -name $vm.vmname -ComputerName $vm.computername | Select-Object -property memoryassigned, memorymaximum

        #if there is more than one disk, "breaks" the array generated by VHD and totals the disks together allowing for the math below
        if($vhdInfo.length -gt 0){
            $totalCurrentVHD = 0
            $totalMaxVHD = 0
            foreach($vhd in $vhdInfo){
                $totalCurrentVHD += $vhd.filesize
                $totalMaxVHD += $vhd.size
            }
        }
        else{
            $totalCurrentVHD = $vhdInfo.filesize
            $totalMaxVHD = $vhdInfo.size
        }       

        #build the values to be used in the script output
        $vhdAssigned = [math]::Round($totalCurrentVHD/1gb -as [double],1)
        $vhdMaxiumum = [math]::Round($totalMaxVHD/1gb -as [double],1)
        $memoryAssigned = [math]::Round($vmMemInfo.memoryassigned/1gb -as [double],1)
        $memoryMaximum = [math]::Round($vmMemInfo.memorymaximum/1gb -as [double],1)
        $CSVAssigned = ($vhdAssigned + $memoryAssigned)
        $CSVMaximum = ($vhdMaxiumum + $memoryMaximum)
        
        #construct the object, this will be a single line in the csv output
        $obj | add-member -MemberType NoteProperty -Name "Server Name" -Value $vm.vmname
        $obj | add-member -MemberType NoteProperty -Name "host" -Value $vm.computername
        $obj | add-member -MemberType NoteProperty -Name "Cluster Volume" -Value $csv        

        $obj | Add-Member -MemberType NoteProperty -Name "Current Disk Size (GB)" -Value $vhdAssigned
        $obj | Add-Member -MemberType NoteProperty -Name "Maximum Size (GB)" -Value $vhdMaxiumum

        $obj | Add-Member -MemberType NoteProperty -name "Current Memory (GB)" -Value $memoryAssigned
        $obj | Add-Member -MemberType NoteProperty -Name "Maximum Memory (GB)" -Value $memoryMaximum

        $obj | add-member -MemberType NoteProperty -Name "Current Allocated Disk Space (GB)" -Value $CSVAssigned
        $obj | Add-Member -MemberType NoteProperty -Name "Total Provisioned Disk Space (GB)" -Value $CSVMaximum 

        $output += $obj

    }
}

$output | Export-Csv -NoTypeInformation -path "C:\temp\ClusterDiskScan.csv"